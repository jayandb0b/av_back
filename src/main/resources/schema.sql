-- Creación de la tabla PARAMETERS
CREATE TABLE IF NOT EXISTS PARAMETERS (
    ID BIGINT GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1) PRIMARY KEY,
    COD VARCHAR(255) NOT NULL,
    VALUE VARCHAR(255) NOT NULL,
    DESCRIPTION VARCHAR(255),
    CONSTRAINT UNIQUE_COD UNIQUE (COD)
);

INSERT INTO PARAMETERS 
(cod, value, DESCRIPTION)
VALUES('JWT_SECRET_KEY', '586E3272357538782F413F4428472B4B6250655368566B597033733676397924', 'JWT_SECURITY');
INSERT INTO parameters
(cod, value, DESCRIPTION)
VALUES('JWT_EXP_MINUTES', '30', 'JWT_SECURITY');
INSERT INTO parameters
(cod, value, DESCRIPTION)
VALUES('JWT_REFRESH_EXP_MINUTES', '43200', 'JWT_SECURITY');

-- Creación de la tabla WS_ENDPOINT_METHOD
CREATE TABLE IF NOT EXISTS WS_ENDPOINT_METHOD (
    ID_ENDPOINT_METHOD BIGINT GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1) PRIMARY KEY,
    SERVICE_NAME VARCHAR(255) NOT NULL,
    NAME_METHOD VARCHAR(255) NOT NULL,
    ACTIVE CHAR(1) NOT NULL CHECK (ACTIVE IN ('Y', 'N')),
    USER_CREATED BIGINT,
    DATE_CREATED TIMESTAMP,
    USER_UPDATED BIGINT,
    DATE_UPDATED TIMESTAMP
);

CREATE INDEX IDX_WS_ENDPOINT_METHOD_SERVICE ON WS_ENDPOINT_METHOD (SERVICE_NAME);

-- Creación de la tabla WS_METHOD_SECURITY
CREATE TABLE IF NOT EXISTS WS_METHOD_SECURITY (
    ID_METHOD_SECURITY BIGINT GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1) PRIMARY KEY,
    ID_METHOD BIGINT NOT NULL,
    ID_USER BIGINT NOT NULL,
    ACTIVE CHAR(1) NOT NULL CHECK (ACTIVE IN ('Y', 'N')),
    USER_CREATED BIGINT,
    DATE_CREATED TIMESTAMP,
    USER_UPDATED BIGINT,
    DATE_UPDATED TIMESTAMP,
    CONSTRAINT FK_METHOD_SECURITY_ENDPOINT FOREIGN KEY (ID_METHOD) 
        REFERENCES WS_ENDPOINT_METHOD (ID_ENDPOINT_METHOD) ON DELETE CASCADE
);

CREATE INDEX IDX_METHOD_SECURITY_USER ON WS_METHOD_SECURITY (ID_USER);
CREATE INDEX IDX_METHOD_SECURITY_METHOD ON WS_METHOD_SECURITY (ID_METHOD);

-- Creación de la tabla MEMBERS
CREATE TABLE IF NOT EXISTS MEMBERS (
    ID BIGINT GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1) PRIMARY KEY,
    SURNAME_NAME VARCHAR(255) NOT NULL,
    COMMENTS VARCHAR(500),
    DNI VARCHAR(20) ,
    EMAIL VARCHAR(255) ,
    MEMBER_NUMBER BIGINT ,
    ACTIVE CHAR(1) CHECK (ACTIVE IN ('Y', 'N')),
    USER_CREATED BIGINT,
    DATE_CREATED TIMESTAMP,
    USER_UPDATED BIGINT,
    DATE_UPDATED TIMESTAMP,
    --CONSTRAINT UNIQUE_DNI UNIQUE (DNI),
    --CONSTRAINT UNIQUE_EMAIL UNIQUE (EMAIL),
    CONSTRAINT UNIQUE_MEMBER_NUMBER UNIQUE (MEMBER_NUMBER)
);

CREATE INDEX IDX_MEMBERS_SURNAME_NAME ON MEMBERS (SURNAME_NAME);

-- Creación de la tabla MEMBER_ADDRESSES
CREATE TABLE IF NOT EXISTS MEMBER_ADDRESSES (
    ID BIGINT GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1) PRIMARY KEY,
    MEMBER_ID BIGINT NOT NULL,
    STREET VARCHAR(255) NOT NULL,
    POSTAL_CODE VARCHAR(20),
    LOCALITY VARCHAR(255),
    PROVINCE VARCHAR(255),
    IS_DEFAULT CHAR(1) CHECK (IS_DEFAULT IN ('Y', 'N')),
    ACTIVE CHAR(1) CHECK (ACTIVE IN ('Y', 'N')),
    USER_CREATED BIGINT,
    DATE_CREATED TIMESTAMP,
    USER_UPDATED BIGINT,
    DATE_UPDATED TIMESTAMP,
    CONSTRAINT FK_MEMBER_ADDRESS_MEMBER FOREIGN KEY (MEMBER_ID) 
        REFERENCES MEMBERS (ID) ON DELETE CASCADE
);

CREATE INDEX IDX_MEMBER_ADDRESSES_MEMBER ON MEMBER_ADDRESSES (MEMBER_ID);

-- Creación de la tabla MEMBER_PHONES
CREATE TABLE IF NOT EXISTS MEMBER_PHONES (
    ID BIGINT GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1) PRIMARY KEY,
    MEMBER_ID BIGINT NOT NULL,
    PHONE VARCHAR(20) NOT NULL,
    IS_DEFAULT CHAR(1) CHECK (IS_DEFAULT IN ('Y', 'N')),
    ACTIVE CHAR(1) CHECK (ACTIVE IN ('Y', 'N')),
    USER_CREATED BIGINT,
    DATE_CREATED TIMESTAMP,
    USER_UPDATED BIGINT,
    DATE_UPDATED TIMESTAMP,
    CONSTRAINT FK_MEMBER_PHONE_MEMBER FOREIGN KEY (MEMBER_ID) 
        REFERENCES MEMBERS (ID) ON DELETE CASCADE
);

CREATE INDEX IDX_MEMBER_PHONES_MEMBER ON MEMBER_PHONES (MEMBER_ID);

-- Creación de la tabla MEMBER_PAYMENTS
CREATE TABLE IF NOT EXISTS MEMBER_PAYMENTS (
    ID BIGINT GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1) PRIMARY KEY,
    MEMBER_ID BIGINT NOT NULL,
    PRINTED_CARNET VARCHAR(255),
    AMOUNT DECIMAL(15, 2) NOT NULL,
    COMMENTS VARCHAR(500),
    PAYMENT_DATE TIMESTAMP,
    ACTIVE CHAR(1) CHECK (ACTIVE IN ('Y', 'N')),
    USER_CREATED BIGINT,
    DATE_CREATED TIMESTAMP,
    USER_UPDATED BIGINT,
    DATE_UPDATED TIMESTAMP,
    CONSTRAINT FK_MEMBER_PAYMENT_MEMBER FOREIGN KEY (MEMBER_ID) 
        REFERENCES MEMBERS (ID) ON DELETE CASCADE
);

CREATE INDEX IDX_MEMBER_PAYMENTS_MEMBER ON MEMBER_PAYMENTS (MEMBER_ID);


-- Creación de la tabla USERS (en lugar de USER para evitar conflictos)
CREATE TABLE IF NOT EXISTS USERS (
    ID BIGINT GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1) PRIMARY KEY,
    USERNAME VARCHAR(100) NOT NULL UNIQUE,
    PASSWORD VARCHAR(255) NOT NULL,
    NAME VARCHAR(100) NOT NULL,
    SURNAME VARCHAR(100) NOT NULL
);

-- Insertando usuarios de prueba
INSERT INTO USERS (USERNAME, PASSWORD, NAME, SURNAME) VALUES 
('admin', '$2a$10$y8a9dJrzcZhyQtfxT3nHVeISdA9n7rkL7uJmhxCNGiEUOg2ahBhSG', 'admin', 'admin'), 
('user', '$2a$12$T7GQtm6fSzSrT8pK1nFWau1xpY8RP0cVmJizVKjAyh7XRPUsvCFmO', 'user', 'user');

-- Creación de la tabla USER_ROLES con clave compuesta
CREATE TABLE IF NOT EXISTS USER_ROLES (
    USER_ID BIGINT NOT NULL,
    ROLE VARCHAR(50) NOT NULL,
    PRIMARY KEY (USER_ID, ROLE),
    CONSTRAINT FK_USER_ROL FOREIGN KEY (USER_ID) 
        REFERENCES USERS (ID) ON DELETE CASCADE
);

-- Insertando roles de usuario
INSERT INTO USER_ROLES (USER_ID, ROLE) VALUES (1, 'ROLE_ADMIN');
INSERT INTO USER_ROLES (USER_ID, ROLE) VALUES (2, 'ROLE_USER');


INSERT INTO PUBLIC.PUBLIC.WS_ENDPOINT_METHOD
(ID_ENDPOINT_METHOD, SERVICE_NAME, NAME_METHOD, ACTIVE, USER_CREATED, DATE_CREATED, USER_UPDATED, DATE_UPDATED)
VALUES(1, 'AV', '/member', 'Y', 1, '2025-12-02 00:00:00.000', 1, '2025-12-02 00:00:00.000');

INSERT INTO PUBLIC.PUBLIC.WS_ENDPOINT_METHOD
(ID_ENDPOINT_METHOD, SERVICE_NAME, NAME_METHOD, ACTIVE, USER_CREATED, DATE_CREATED, USER_UPDATED, DATE_UPDATED)
VALUES(2, 'AV', '^/member/\d+$', 'Y', 1, '2025-12-02 00:00:00.000', 1, '2025-12-02 00:00:00.000');

-------

INSERT INTO PUBLIC.PUBLIC.WS_METHOD_SECURITY
(ID_METHOD_SECURITY, ID_METHOD, ID_USER, ACTIVE, USER_CREATED, DATE_CREATED, USER_UPDATED, DATE_UPDATED)
VALUES(1, 1, 1, 'Y', 1, '2025-12-02 00:00:00.000', 1, '2025-12-02 00:00:00.000');

INSERT INTO PUBLIC.PUBLIC.WS_METHOD_SECURITY
(ID_METHOD_SECURITY, ID_METHOD, ID_USER, ACTIVE, USER_CREATED, DATE_CREATED, USER_UPDATED, DATE_UPDATED)
VALUES(2, 2, 1, 'Y', 1, '2025-12-02 00:00:00.000', 1, '2025-12-02 00:00:00.000');

INSERT INTO PUBLIC.PUBLIC.WS_METHOD_SECURITY
(ID_METHOD_SECURITY, ID_METHOD, ID_USER, ACTIVE, USER_CREATED, DATE_CREATED, USER_UPDATED, DATE_UPDATED)
VALUES(3, 1, 2, 'Y', 1, '2025-12-02 00:00:00.000', 1, '2025-12-02 00:00:00.000');

INSERT INTO PUBLIC.PUBLIC.WS_METHOD_SECURITY
(ID_METHOD_SECURITY, ID_METHOD, ID_USER, ACTIVE, USER_CREATED, DATE_CREATED, USER_UPDATED, DATE_UPDATED)
VALUES(4, 2, 2, 'Y', 1, '2025-12-02 00:00:00.000', 1, '2025-12-02 00:00:00.000');